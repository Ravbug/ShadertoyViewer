name: Build-App
on: push

jobs:
  build-linux:
    name: Linux x64
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Add key file
        shell: bash
        env:
          KEY: ${{secrets.SHADERTOY_API_KEY}}
        run: echo "#define API_KEY \"$KEY\"" > src/key.hpp
      - name: Install Dependencies
        run: sudo apt update && sudo apt install -y cmake g++-8 ninja-build libgl1-mesa-dev freeglut3-dev --no-install-recommends
      - name: Configure
        run: mkdir -p build; cd build; CC=/usr/bin/gcc-8 CXX=/usr/bin/g++-8 cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release  -Wno-dev ..
      - name: Build
        run: cd build; cmake --build . --config release --target install
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ShadertoyViewer_linux64
          path: build/Release/ShadertoyViewer

  build-linux-arm:
    name: Linux ARM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Add key file
        shell: bash
        env:
          KEY: ${{secrets.SHADERTOY_API_KEY}}
        run: echo "#define API_KEY \"$KEY\"" > src/key.hpp
      - name: Setup Repositories
        run: sudo mv config/crosscomp-sources.list /etc/apt/sources.list
      - name: Check apt sources
        run: cat /etc/apt/sources.list
      - name:  Add arm64 as architecture
        run: sudo dpkg --add-architecture arm64
      - name: Update APT
        run: sudo apt-get update
        continue-on-error: true
      - name: Install Host Dependencies
        run: sudo apt update && sudo apt install -y cmake:amd64 ninja-build:amd64 --no-install-recommends
      - name: Install Target Dependencies
        run: sudo apt install libgl1-mesa-dev:arm64  freeglut3-dev:arm64 libx11-dev:arm64 libxext-dev:arm64 libxrender-dev:arm64 libxrandr-dev:arm64 libxtst-dev:arm64 libxt-dev:arm64 gcc-aarch64-linux-gnu:amd64 g++-aarch64-linux-gnu:amd64 -y --no-install-recommends
      - name: Configure
        run: mkdir -p build; cd build; CC=/usr/bin/aarch64-linux-gnu-gcc CXX=/usr/bin/aarch64-linux-gnu-g++ cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release  -Wno-dev ..
      - name: Build
        run: cd build; cmake --build . --config release --target install
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ShadertoyViewer_linuxarm64
          path: build/Release/ShadertoyViewer
  
  build-mac:
    name: macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Ninja
        run: brew install ninja
      - name: Add key file
        shell: bash
        env:
          KEY: ${{secrets.SHADERTOY_API_KEY}}
        run: echo "#define API_KEY \"$KEY\"" > src/key.hpp
      - name: Configure
        run: mkdir -p build; cd build; cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release ..
      - name: Build
        run: cd build; cmake --build . --config release --target install
      - name: Compress App
        run: cd build/Release; zip -r -9 ShadertoyViewer.zip *.app
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ShadertoyViewer_macOS
          path: build/Release/ShadertoyViewer.zip
  
  build-win:
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Add key file
        shell: powershell
        env:
          KEY: ${{secrets.SHADERTOY_API_KEY}}
        run: echo "#define API_KEY `"$env:KEY`"" > src\key.hpp
      - name: Configure
        run: mkdir -p build; cd build; cmake -DCMAKE_BUILD_TYPE=Release ..
      - name: Build
        run: cd build; cmake --build . --config release --target install
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ShadertoyViewer_Windows
          path: build\release\*.exe
